From a011ea0b873c0978f041cff5c78024e9a1649883 Mon Sep 17 00:00:00 2001
From: HiGarfield <HiGarfield@126.com>
Date: Fri, 10 Mar 2023 02:08:46 +0800
Subject: [PATCH] ath9k: Reset chip on potential deaf state

The chip is switching seemingly random into a state which can be described
as "deaf". No or nearly no interrupts are generated anymore for incoming
packets. Existing links either break down after a while and new links will
not be established.

The driver doesn't know if there is no other device available or if it
ended up in an "deaf" state. Resetting the chip proactively avoids
permanent problems in case the chip really was in its "deaf" state but
maybe causes unnecessary resets in case it wasn't "deaf".

Signed-off-by: Simon Wunderlich <simon.wunderlich@xxxxxxxxxxxxx>
[sven.eckelmann@xxxxxxxxxxxxx: port to recent ath9k, add commit message]
Signed-off-by: Sven Eckelmann <sven.eckelmann@xxxxxxxxxxxxx>
---
 drivers/net/wireless/ath/ath9k/ath9k.h |  4 ++
 drivers/net/wireless/ath/ath9k/debug.c |  1 +
 drivers/net/wireless/ath/ath9k/debug.h |  1 +
 drivers/net/wireless/ath/ath9k/init.c  |  1 +
 drivers/net/wireless/ath/ath9k/link.c  | 54 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath9k/main.c  |  1 +
 drivers/net/wireless/ath/ath9k/recv.c  |  4 ++
 7 files changed, 66 insertions(+)

--- a/drivers/net/wireless/ath/ath9k/ath9k.h
+++ b/drivers/net/wireless/ath/ath9k/ath9k.h
@@ -1056,6 +1056,10 @@ struct ath_softc {
 	short nbcnvifs;
 	unsigned long ps_usecount;
 
+	unsigned long last_check_time;
+	u32 last_check_interrupts;
+	u8 rx_inactive_cnt;
+
 	u16 airtime_flags; /* AIRTIME_* */
 
 	struct ath_rx rx;
--- a/drivers/net/wireless/ath/ath9k/debug.c
+++ b/drivers/net/wireless/ath/ath9k/debug.c
@@ -764,6 +764,7 @@ static int read_file_reset(struct seq_fi
 		[RESET_TYPE_MCI] = "MCI Reset",
 		[RESET_TYPE_CALIBRATION] = "Calibration error",
 		[RESET_TYPE_DEADBEEF] = "deadbeef hang",
+		[RESET_TYPE_DEAF] = "deaf hang",
 		[RESET_TX_DMA_ERROR] = "Tx DMA stop error",
 		[RESET_RX_DMA_ERROR] = "Rx DMA stop error",
 	};
--- a/drivers/net/wireless/ath/ath9k/debug.h
+++ b/drivers/net/wireless/ath/ath9k/debug.h
@@ -51,6 +51,7 @@ enum ath_reset_type {
 	RESET_TYPE_MCI,
 	RESET_TYPE_CALIBRATION,
 	RESET_TYPE_DEADBEEF,
+	RESET_TYPE_DEAF,
 	RESET_TX_DMA_ERROR,
 	RESET_RX_DMA_ERROR,
 	__RESET_TYPE_MAX
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -692,6 +692,7 @@ static int ath9k_init_softc(u16 devid, s
 	sc->cur_chan = &sc->chanctx[0];
 	if (!ath9k_is_chanctx_enabled())
 		sc->cur_chan->hw_queue_base = 0;
+	sc->rx_inactive_cnt = 0;
 
 	common->ops = &ah->reg_ops;
 	common->bus_ops = bus_ops;
--- a/drivers/net/wireless/ath/ath9k/link.c
+++ b/drivers/net/wireless/ath/ath9k/link.c
@@ -162,6 +162,57 @@ static bool ath_hw_hang_deadbeef(struct
 	return true;
 }
 
+static bool ath_hw_hang_deaf(struct ath_softc *sc)
+{
+#ifndef CPTCFG_ATH9K_DEBUGFS
+	return false;
+#else
+	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
+	u32 cur_check_interrupts, interrupts, interrupts_per_s;
+	unsigned int interval;
+	unsigned long cur_check_time;
+	unsigned long flags;
+
+	/* get historic data */
+	cur_check_time = jiffies;
+	interval = jiffies_to_msecs(cur_check_time - sc->last_check_time);
+
+	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
+		cur_check_interrupts = sc->debug.stats.istats.rxlp;
+	else
+		cur_check_interrupts = sc->debug.stats.istats.rxok;
+	interrupts = cur_check_interrupts - sc->last_check_interrupts;
+
+	/* save current data */
+	sc->last_check_time = cur_check_time;
+	sc->last_check_interrupts = cur_check_interrupts;
+
+	/* sanity check, should be ATH_HANG_WORK_INTERVAL */
+	if (interval > ATH_HANG_WORK_INTERVAL * 6L / 5 ||
+		interval < ATH_HANG_WORK_INTERVAL * 4L / 5)
+		return false;
+
+	/* should be at least one interrupt per second */
+	interrupts_per_s = interrupts * 1000 / interval;
+	if (interrupts_per_s >= 1)
+	{
+		sc->rx_inactive_cnt = 0;
+		return false;
+	}
+
+	if (++sc->rx_inactive_cnt <= 15)
+		return false;
+
+	sc->rx_inactive_cnt = 0;
+
+	ath_dbg(common, RESET,
+			"RX deaf hang is detected. Schedule chip reset\n");
+	ath9k_queue_reset(sc, RESET_TYPE_DEAF);
+
+	return true;
+#endif
+}
+
 void ath_hw_hang_work(struct work_struct *work)
 {
 	struct ath_softc *sc = container_of(work, struct ath_softc,
@@ -170,6 +221,9 @@ void ath_hw_hang_work(struct work_struct
 	if (ath_hw_hang_deadbeef(sc))
 		goto requeue_worker;
 
+	if (ath_hw_hang_deaf(sc))
+		goto requeue_worker;
+
 requeue_worker:
 	ieee80211_queue_delayed_work(sc->hw, &sc->hw_hang_work,
 				     msecs_to_jiffies(ATH_HANG_WORK_INTERVAL));
--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -276,6 +276,7 @@ static bool ath_complete_reset(struct at
 	}
 
 	sc->gtt_cnt = 0;
+	sc->rx_inactive_cnt = 0;
 
 	ath9k_hw_set_interrupts(ah);
 	ath9k_hw_enable_interrupts(ah);
--- a/drivers/net/wireless/ath/ath9k/recv.c
+++ b/drivers/net/wireless/ath/ath9k/recv.c
@@ -1236,6 +1236,8 @@ requeue:
 			ath_rx_edma_buf_link(sc, qtype);
 		}
 
+		sc->rx_inactive_cnt = 0;
+
 		if (!budget--)
 			break;
 	} while (1);
@@ -1245,5 +1247,7 @@ requeue:
 		ath9k_hw_set_interrupts(ah);
 	}
 
+	sc->rx_inactive_cnt = 0;
+
 	return 0;
 }
