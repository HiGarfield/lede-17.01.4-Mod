From 435c9245abf907c779f5a5959330c6b947ea137a Mon Sep 17 00:00:00 2001
From: HiGarfield <HiGarfield@126.com>
Date: Mon, 3 Oct 2022 01:58:57 +0800
Subject: [PATCH] dnsmasq: filter https and unknown

---
 src/cache.c        | 14 ++++++++++++++
 src/dns-protocol.h |  1 +
 src/dnsmasq.h      |  8 +++++++-
 src/option.c       |  6 ++++++
 src/rfc1035.c      | 18 ++++++++++++++++++
 5 files changed, 46 insertions(+), 1 deletion(-)

diff --git a/src/cache.c b/src/cache.c
index 8ed4740..dc7e4d9 100644
--- a/src/cache.c
+++ b/src/cache.c
@@ -1862,6 +1862,20 @@ char *record_source(unsigned int index)
   return "<unknown>";
 }
 
+// patch: function returns integer 1 if query type is unknown.
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type)
+{
+  unsigned int i;
+  for (i = 0; i < (sizeof(typestr)/sizeof(typestr[0])); i++)
+    if (typestr[i].type == type) 
+      {
+	return 0;
+      }
+  return 1;
+}
+// end of patch 
+
 static char *querystr(char *desc, unsigned short type)
 {
   unsigned int i;
diff --git a/src/dns-protocol.h b/src/dns-protocol.h
index 8558c33..82e947c 100644
--- a/src/dns-protocol.h
+++ b/src/dns-protocol.h
@@ -71,6 +71,7 @@
 #define T_NSEC          47
 #define T_DNSKEY        48
 #define T_NSEC3         50
+#define T_HTTPS         65
 #define	T_TKEY		249		
 #define	T_TSIG		250
 #define T_AXFR          252
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 293278a..1c3efd0 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -279,7 +279,9 @@ struct event_desc {
 #define OPT_FILTER_AAAA    68
 #define OPT_STRIP_ECS      69
 #define OPT_STRIP_MAC      70
-#define OPT_LAST           71
+#define OPT_FILTER_HTTPS   71
+#define OPT_FILTER_UNKNOWN 72
+#define OPT_LAST           73
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
@@ -1280,6 +1282,10 @@ void cache_init(void);
 void next_uid(struct crec *crecp);
 void log_query(unsigned int flags, char *name, union all_addr *addr, char *arg, unsigned short type); 
 char *record_source(unsigned int index);
+// patch: function returns integer 1 if query type is unknown
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type);
+// end of patch
 int cache_find_non_terminal(char *name, time_t now);
 struct crec *cache_find_by_addr(struct crec *crecp,
 				union all_addr *addr, time_t now, 
diff --git a/src/option.c b/src/option.c
index c5e8cb4..360ed0f 100644
--- a/src/option.c
+++ b/src/option.c
@@ -181,6 +181,8 @@ struct myoption {
 #define LOPT_STRIP_MAC     372
 #define LOPT_CONF_OPT      373
 #define LOPT_CONF_SCRIPT   374
+#define LOPT_FILTER_HTTPS  375
+#define LOPT_FILTER_UNKNOWN 376
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -220,6 +222,8 @@ static const struct myoption opts[] =
     { "filterwin2k", 0, 0, 'f' },
     { "filter-A", 0, 0, LOPT_FILTER_A },
     { "filter-AAAA", 0, 0, LOPT_FILTER_AAAA },
+    { "filter-https", 0, 0, LOPT_FILTER_HTTPS },
+    { "filter-unknown", 0, 0, LOPT_FILTER_UNKNOWN },
     { "pid-file", 2, 0, 'x' },
     { "strict-order", 0, 0, 'o' },
     { "server", 1, 0, 'S' },
@@ -395,6 +399,8 @@ static struct {
   { 'f', OPT_FILTER, NULL, gettext_noop("Don't forward spurious DNS requests from Windows hosts."), NULL },
   { LOPT_FILTER_A, OPT_FILTER_A, NULL, gettext_noop("Don't include IPv4 addresses in DNS answers."), NULL },
   { LOPT_FILTER_AAAA, OPT_FILTER_AAAA, NULL, gettext_noop("Don't include IPv6 addresses in DNS answers."), NULL },
+  { LOPT_FILTER_HTTPS, OPT_FILTER_HTTPS, NULL, gettext_noop("Filter all HTTPS/query type 65 requests."), NULL },
+  { LOPT_FILTER_UNKNOWN, OPT_FILTER_UNKNOWN, NULL, gettext_noop("Filter all unknown query types (known are defined in cache.c)."), NULL },
   { 'F', ARG_DUP, "<ipaddr>,...", gettext_noop("Enable DHCP in the range given with lease duration."), NULL },
   { 'g', ARG_ONE, "<groupname>", gettext_noop("Change to this group after startup (defaults to %s)."), CHGRP },
   { 'G', ARG_DUP, "<hostspec>", gettext_noop("Set address or hostname for a specified machine."), NULL },
diff --git a/src/rfc1035.c b/src/rfc1035.c
index dc83cac..07d9d0c 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -2093,6 +2093,24 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 	    }
 	}
 
+    //patch to filter https/query type 65 forwards
+    if (qtype == T_HTTPS && option_bool(OPT_FILTER_HTTPS) ){
+        //return a null reply
+        ans = 1;
+        if (!dryrun) log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL, 0);
+            break;
+    }
+    //end of patch
+    //patch to filter all unknown query types
+    //known types are defined in cache.c:typestr:36.
+    if (is_query_type_unknown(qtype) && option_bool(OPT_FILTER_UNKNOWN)) {
+        //return a null reply
+        ans = 1;
+        if (!dryrun) log_query(F_CONFIG | F_NEG, name, NULL, NULL, 0);
+            break;
+    }
+    //end of patch
+
       if (!ans)
 	return 0; /* failed to answer a question */
     }
-- 
2.25.1

