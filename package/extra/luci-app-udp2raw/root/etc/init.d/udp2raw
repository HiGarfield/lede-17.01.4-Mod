#!/bin/sh /etc/rc.common

START=99
STOP=15
USE_PROCD=1

NAME=udp2raw

_log() {
	logger -p "daemon.$1" -t "$NAME" "$2"
}

has_valid_server() {
	local server
	for server in $@; do
		[ "$(uci_get $NAME $server)" = "servers" ] && return 0
	done
	return 1
}

flush_ipt_rules() {
	iptables-save -c | grep -v "\-j[[:space:]]\+${NAME}DwrW_" | iptables-restore -c
}

create_config() {
	local config_file="$1"
	echo "# auto-generated config file from /etc/config/udp2raw" >$config_file

	echo "-c" >>$config_file
	echo "-l ${listen_addr}:${listen_port}" >>$config_file && _log "info" "listening on: ${listen_addr}:${listen_port}"
	echo "-r ${server_addr}:${server_port}" >>$config_file

	[ -n "$raw_mode" ] && echo "--raw-mode ${raw_mode}" >>$config_file && _log "info" "raw-mode: ${raw_mode}"
	[ -n "$key" ] && echo "--key ${key}" >>$config_file
	[ -n "$cipher_mode" ] && echo "--cipher-mode ${cipher_mode}" >>$config_file
	[ -n "$auth_mode" ] && echo "--auth-mode ${auth_mode}" >>$config_file

	echo "--auto-rule" >>$config_file
	echo "--keep-rule" >>$config_file

	[ -n "$seq_mode" ] && echo "--seq-mode ${seq_mode}" >>$config_file
	[ -n "$lower_level" ] && echo "--lower-level ${lower_level}" >>$config_file
	[ -n "$source_ip" ] && echo "--source-ip ${source_ip}" >>$config_file
	[ -n "$source_port" ] && echo "--source-port ${source_port}" >>$config_file
	echo "--retry-on-error" >>$config_file

	echo "--log-level 1" >>$config_file
	echo "--disable-color" >>$config_file

	sock_buf="$(awk '/^MemTotal:/{print int($2/64); exit}' /proc/meminfo)"
	if [ -z "$sock_buf" ] || [ "$sock_buf" -lt 1024 ]; then
		sock_buf=1024
	elif [ "$sock_buf" -gt 10240 ]; then
		sock_buf=10240
	fi
	echo "--sock-buf $sock_buf" >>$config_file
	echo "--force-sock-buf" >>$config_file
}

validate_config_section() {
	uci_validate_section "$NAME" general "$1" \
		'server:uciname'
}

validate_server_section() {
	uci_validate_section "$NAME" servers "$1" \
		'server_addr:host' \
		'server_port:port:8080' \
		'listen_addr:ipaddr:0.0.0.0' \
		'listen_port:port:2080' \
		'raw_mode:or("faketcp", "udp", "icmp", "easy-faketcp"):faketcp' \
		'key:string' \
		'cipher_mode:or("aes128cbc", "xor", "none"):aes128cbc' \
		'auth_mode:or("md5", "crc32", "simple", "none"):md5' \
		'seq_mode:range(0,4)' \
		'lower_level:string' \
		'source_ip:ipaddr' \
		'source_port:port'
}

start_instance() {
	local server="$1"

	if [ -z "$server" ] || [ "$server" = "nil" ]; then
		return 0
	elif ! validate_server_section "$server"; then
		_log "err" "Server config validation failed."
		return 1
	fi

	# 服务器地址必须是域名或者ip地址
	/sbin/validate_data "hostname" "$server_addr" >/dev/null 2>&1 || {
		_log "err" "Server address validation failed."
		return 1
	}

	[ -d /var/etc ] || mkdir -p /var/etc
	local config_file="/var/etc/${NAME}.${server}.conf"
	create_config "$config_file" || return 1

	procd_open_instance
	procd_set_param limits nofile="65535 65535"
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_append_param limits core="unlimited"
	}

	procd_set_param command /usr/bin/udp2raw
	procd_append_param command --conf-file "$config_file"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param file "$config_file"
	procd_set_param pidfile "/var/run/${NAME}.${server}.pid"
	procd_close_instance
}

start_service() {
	if ! validate_config_section "general"; then
		_log "err" "Config validate failed."
		return 1
	fi
	has_valid_server $server || return 1
	for srv in $server; do
		start_instance $srv
	done
}

stop_service() {
	flush_ipt_rules
}

reload_service() {
	restart
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}
