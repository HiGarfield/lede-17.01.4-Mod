#!/bin/sh
#macvlan及PPPoE拨号接口配置批量自动生成脚本
#Copyright (C) 2015 GuoGuo<gch981213@gmail.com>
. /lib/functions.sh

#检测IP列表
chk_ip_list="$(awk '/^nameserver/{if($2!~/.*:.*/) print $2}' /tmp/resolv.conf.auto 2>/dev/null | xargs) 114.114.114.114 119.29.29.29 223.5.5.5 180.76.76.76"
fw_str="wan wan6"

#添加MWAN负载均衡相关配置
#$1:接口名称
mwan_cfg_add() {
	#gen mwan3_interface
	uci -q batch <<-EOF >/dev/null
		set mwan3.${1}=interface
		set mwan3.${1}.enabled=1
		set mwan3.${1}.count=1
		set mwan3.${1}.timeout=2
		set mwan3.${1}.interval=5
		set mwan3.${1}.down=3
		set mwan3.${1}.up=1
	EOF

	for i in $chk_ip_list; do
		uci -q add_list mwan3.${1}.track_ip="$i"
	done

	uci -q batch <<-EOF >/dev/null
		set mwan3.${1}.reliability=1
		set mwan3.${1}_m1_w1=member
		set mwan3.${1}_m1_w1.interface=${1}
		set mwan3.${1}_m1_w1.metric=1
		set mwan3.${1}_m1_w1.weight=1
		add_list mwan3.balanced.use_member=${1}_m1_w1
	EOF
}

#删除MWAN负载均衡相关配置
#$1:接口名称
mwan_cfg_del() {
	uci -q batch <<-EOF >/dev/null
		del mwan3.${1}
		del mwan3.${1}_m1_w1
		del_list mwan3.balanced.use_member=${1}_m1_w1
	EOF
}

#添加macvlan设备
#$1:设虚拟备名称 $2:原始设备名称
macvlan_dev_add() {
	uci -q batch <<-EOF >/dev/null
		set network.macvlandev_${1}=device
		set network.macvlandev_${1}.name=${1}
		set network.macvlandev_${1}.ifname=${2}
		set network.macvlandev_${1}.type=macvlan
	EOF
}

#添加PPPoE接口
#$1:接口名称 $2:设备名称 $3:账户 $4:密码 $5:网关跃点
pppoe_if_add() {
	#gen wan if
	uci -q batch <<-EOF >/dev/null
		set network.${1}=interface
		set network.${1}.ifname=${2}
		set network.${1}.proto=pppoe
		set network.${1}.username=${3}
		set network.${1}.password=${4}
		set network.${1}.metric=${5}
	EOF
	#gen firewall
	fw_str="${fw_str} ${1}"
}

apply_cfg() {
	local pids="$(pgrep -f "pppconnectcheck" | xargs)"
	[ -n "$pids" ] && kill -9 $pids
	uci -q commit
	/etc/init.d/network reload
	/etc/init.d/firewall reload
	mwan3 restart
}

general_config_load() {
	config_load 'syncdial'
	config_get_bool enabled 'config' 'enabled' 0
	[ "$enabled" -eq 0 ] && {
		echo "Syncdial is disabled. Exit now."
		apply_cfg
		exit 1
	}
	config_get wannum 'config' 'wannum' 2

	config_load 'network'
	config_get pppoe_user 'wan' 'username'
	config_get pppoe_password 'wan' 'password'
	config_get pppoe_ifname 'wan' 'ifname'
	config_get wan_proto 'wan' 'proto'

	[ "$wan_proto" = 'pppoe' ] &&
		[ -n "$pppoe_user" ] &&
		[ -n "$pppoe_password" ] || {
		echo "Wan setting error. Exit now."
		apply_cfg
		exit 1
	}
}

check_remove_device() {
	local devcfg=${1}
	[ "${devcfg::11}" = 'macvlandev_' ] && uci -q del "network.$devcfg"
}

check_remove_interface() {
	local ifcfg=${1}
	echo "$ifcfg" | grep -q "^vwan[[:digit:]]\+$" && {
		uci -q del "network.$ifcfg"
		mwan_cfg_del "$ifcfg"
	}
}

general_config_remove() {
	config_load network
	config_foreach check_remove_device 'device'
	config_foreach check_remove_interface 'interface'
	[ "$(uci -q get network.wan.proto)" = "none" ] && {
		uci -q set network.wan.proto=pppoe
	}
	mwan_cfg_del 'wan'
	uci -q batch <<-EOF >/dev/null
		set firewall.@zone[1].network="wan wan6"
		commit
	EOF
}

generate_rand_mac() {
    local hex_raw ouipart euipart full_mac byte1 byte1_hex
    local oldIFS="$IFS" # Save the original field separator
    while :; do
        # Generate raw data (compatible with BusyBox)
        hex_raw=$(head -c6 /dev/urandom | hexdump -v -e '/1 "%02x "') || continue

        # Split byte data
        IFS=' '         # Set space as the delimiter
        set -- $hex_raw # Store in positional parameters
        IFS="$oldIFS"   # Restore the original field separator
        [ $# -ne 6 ] && continue

        # Process the first byte
        byte1=$((0x$1 & 0xFC)) # Force unicast + global address
        byte1_hex="$(printf "%02x" "$byte1")"

        # Construct MAC components
        ouipart="$byte1_hex:$2:$3"
        euipart="$4:$5:$6"
        full_mac="$byte1_hex:$2:$3:$4:$5:$6"

        # OUI blacklist check
        case "$ouipart" in
        "00:00:00" | \
            "ff:ff:ff" | \
            "00:00:0c" | \
            "01:00:5e" | \
            "33:33:"*)
            continue
            ;;
        esac

        # EUI blacklist check
        case "$euipart" in
        "00:00:00" | \
            "ff:ff:f"*)
            continue
            ;;
        esac

        # Final format validation
        echo "$full_mac" | grep -qE '^([0-9a-f]{2}:){5}[0-9a-f]{2}$' || continue
        break
    done

    echo "$full_mac"
}

general_config_remove
general_config_load

uci -q batch <<-EOF >/dev/null
	set network.wan.metric=40
	set network.wan.proto=none
EOF

ifname=$(uci -q get network.wan.ifname)
for i in $(seq 1 "$wannum"); do
	ip link add link "$ifname" name "macvlan$i" type macvlan
	ifconfig "macvlan$i" hw ether "$(generate_rand_mac)"
	ifconfig "macvlan$i" up
done

for i in $(seq 1 "$wannum"); do
	pppoe_if_add "vwan$i" "macvlan$i" "$pppoe_user" "$pppoe_password" $((40 + i))
	mwan_cfg_add "vwan$i"
done

uci -q set firewall.@zone[1].network="$fw_str"

apply_cfg

exit 0
