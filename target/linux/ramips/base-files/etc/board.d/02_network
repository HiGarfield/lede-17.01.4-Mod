#!/bin/sh

# shellcheck shell=dash

. /lib/functions.sh
. /lib/ramips.sh
. /lib/functions/uci-defaults.sh
. /lib/functions/system.sh


# Function to validate MAC addresses
#
# This function validates two MAC addresses for consistency and uniqueness.
# It checks if both MAC addresses are valid, if they are unicast addresses,
# if they are globally unique, and if their OUI (Organizationally Unique Identifier)
# is consistent.
#
# Parameters:
#   lan_mac_addr: The MAC address of the LAN interface.
#   wan_mac_addr: The MAC address of the WAN interface.
#
# Returns:
#   0 if both MAC addresses are valid and consistent.
#   1 if any of the MAC addresses is invalid or inconsistent.
#
# Example:
#   validate_mac_addresses "00:11:22:33:44:55" "00:11:22:66:77:88"

validate_mac_addresses() {
    local lan_mac_addr="$1"
    local wan_mac_addr="$2"
    local current_mac lowercase_mac first_octet oui_part eui_part lan_oui wan_oui

    # Parameter existence check
    { [ -z "$lan_mac_addr" ] || [ -z "$wan_mac_addr" ]; } && return 1

    # Process both MAC addresses
    for current_mac in "$lan_mac_addr" "$wan_mac_addr"; do
        # Convert to lowercase
        lowercase_mac=$(echo "$current_mac" | tr 'A-F' 'a-f')

        # Validate MAC format using regex
        echo "$lowercase_mac" | grep -qE '^([0-9a-f]{2}:){5}[0-9a-f]{2}$' || return 1

        # Verify unicast address (LSB of first octet)
        first_octet=${lowercase_mac%%:*}
        [ $((0x$first_octet & 0x01)) -ne 0 ] && return 1

        # Ensure globally unique address (2nd LSB)
        [ $((0x$first_octet & 0x02)) -ne 0 ] && return 1

        # Check reserved OUI patterns
        oui_part=$(echo "$lowercase_mac" | cut -d':' -f1-3)
        case "$oui_part" in
        "00:00:00" | "ff:ff:ff" | "00:00:0c" | "01:00:5e" | "33:33:"*)
            # Reject invalid/broadcast/multicast OUIs
            return 1
            ;;
        esac

        # Validate EUI-48 identifier portion
        eui_part=$(echo "$lowercase_mac" | cut -d':' -f4-6)
        case "$eui_part" in
        "00:00:00" | "ff:ff:ff")
            # Reject invalid device identifiers
            return 1
            ;;
        esac
    done

    # Verify OUI consistency between interfaces
    lan_oui=$(echo "$lan_mac_addr" | tr 'A-F' 'a-f' | cut -d':' -f1-3)
    wan_oui=$(echo "$wan_mac_addr" | tr 'A-F' 'a-f' | cut -d':' -f1-3)
    [ "$lan_oui" != "$wan_oui" ] && return 1

    return 0
}

generate_rand_mac() {
    local hex_raw ouipart euipart full_mac byte1 byte1_hex
    local oldIFS="$IFS" # Save the original field separator
    while :; do
        # Generate raw data (compatible with BusyBox)
        hex_raw=$(head -c6 /dev/urandom | hexdump -v -e '/1 "%02x "') || continue

        # Split byte data
        IFS=' '         # Set space as the delimiter
        set -- $hex_raw # Store in positional parameters
        IFS="$oldIFS"   # Restore the original field separator
        [ $# -ne 6 ] && continue

        # Process the first byte
        byte1=$((0x$1 & 0xFC)) # Force unicast + global address
        byte1_hex="$(printf "%02x" "$byte1")"

        # Construct MAC components
        ouipart="$byte1_hex:$2:$3"
        euipart="$4:$5:$6"
        full_mac="$byte1_hex:$2:$3:$4:$5:$6"

        # OUI blacklist check
        case "$ouipart" in
        "00:00:00" | \
            "ff:ff:ff" | \
            "00:00:0c" | \
            "01:00:5e" | \
            "33:33:"*)
            continue
            ;;
        esac

        # EUI blacklist check
        case "$euipart" in
        "00:00:00" | \
            "ff:ff:f"*)
            continue
            ;;
        esac

        # Final format validation
        echo "$full_mac" | grep -qE '^([0-9a-f]{2}:){5}[0-9a-f]{2}$' || continue
        break
    done

    echo "$full_mac"
}

ramips_setup_rt3x5x_vlans()
{
	if [ ! -x /sbin/swconfig ]; then
		# legacy default
		ucidef_set_interfaces_lan_wan "eth0.1" "eth0.2"
		return
	fi
	local wanports=""
	local lanports=""
	for port in 5 4 3 2 1 0; do
		if [ `swconfig dev rt305x port $port get disable` = "1" ]; then
			continue
		fi
		if [ `swconfig dev rt305x port $port get lan` = "0" ]; then
			wanports="$port:wan $wanports"
		else
			lanports="$port:lan $lanports"
		fi
	done
	ucidef_add_switch "rt305x" $lanports $wanports "6t@eth0"
}

ramips_setup_interfaces()
{
	local board="$1"

	case $board in
	11acnas|\
	newifi-d2|\
	w2914nsv2)
		ucidef_add_switch "switch0" \
			"0:lan:4" "1:lan:3" "2:lan:2" "3:lan:1" "4:wan:5" "6@eth0"
		;;
	3g150b|\
	3g300m|\
	a5-v11|\
	all0256n|\
	all5002|\
	all5003|\
	broadway|\
	dcs-930|\
	dcs-930l-b1|\
	ht-tm02|\
	linkits7688 | \
	linkits7688d | \
	m2m|\
	microwrt|\
	mpr-a2|\
	ncs601w|\
	omega2 | \
	omega2p | \
	timecloud|\
	w150m|\
	widora-neo|\
	wnce2001|\
	zbt-cpe102|\
	zte-q7)
		ucidef_add_switch "switch0"
		ucidef_add_switch_attr "switch0" "enable" "false"
		ucidef_set_interface_lan "eth0"
		;;
	mlw221|\
	mr-102n)
		ucidef_set_interface_lan "eth0.2"
		;;
	3g-6200n|\
	ac1200pro|\
	ai-br100|\
	d240|\
	db-wrt01|\
	dir-300-b7|\
	dir-320-b1|\
	dir-610-a1|\
	dir-615-h1|\
	firewrt|\
	hlk-rm04|\
	mac1200rv2|\
	miwifi-nano|\
	mt7621|\
	mt7628|\
	mzk-750dhp|\
	mzk-w300nh2|\
	nixcore|\
	oy-0001|\
	pbr-m1|\
	psg1208|\
	psg1218|\
	sap-g3200u3|\
	sk-wb8|\
	vr500|\
	wf-2881|\
	witi|\
	wl-wn575a3|\
	wndr3700v5|\
	wt1520|\
	zbt-ape522ii|\
	zbt-we826|\
	zbt-wg2626|\
	zbt-wg3526|\
	zbt-wr8305rt|\
	hd51-n|\
	rg-nbr700gw|\
	link7)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "6@eth0"
		;;
	youku-yk1)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "4:wan" "6@eth0"
		;;
	whr-300hp2|\
	whr-600d|\
	wsr-1166|\
	wsr-600)
		ucidef_add_switch "switch0" \
			"0:lan:1" "1:lan:2" "2:lan:3" "3:lan:4" "4:wan:5" "6@eth0"
		;;
	ar670w|\
	ar725w|\
	rt-n15|\
	wl-351)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "5@eth0"
		;;
	asl26555|\
	rp-n53)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "6t@eth0"
		;;
	atp-52b|\
	awm002-evb|\
	awm003-evb|\
	c20i|\
	dir-645|\
	f5d8235-v2|\
	gl-mt300a|\
	gl-mt300n|\
	gl-mt750|\
	hg255d|\
	jhr-n805r|\
	jhr-n825r|\
	jhr-n926r|\
	mzk-wdpr|\
	rb750gr3|\
	rt-n14u|\
	ubnt-erx|\
	ur-326n4g|\
	wrtnode|\
	wrtnode2p | \
	wrtnode2r | \
	wt3020|\
	zbt-wa05|\
	a3004ns|\
	wr1200js|\
	hw24g|\
	dw22d)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "0:wan" "6@eth0"
		;;
	5k-w20)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "0:wan" "6@eth0"
		;;
	awapn2403)
		ucidef_add_switch "switch0" \
			"0:lan" "1:wan" "6@eth0"
		;;
	b2c|\
	nw718|\
	psr-680w|\
	sl-r7205|\
	ur-336un|\
	w502u|\
	wr6202)
		ucidef_set_interfaces_lan_wan "eth0.1" "eth0.2"
		;;
	br-6475nd)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "0:wan" "9@eth0"
		;;
	cf-wr800n|\
	ex2700)
		ucidef_add_switch "switch0" \
			"4:lan" "6t@eth0"
		;;
	cy-swr1100)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "9@eth0"
		;;
	ghl-r-001)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "4:wan" "6@eth0"
		;;
	yyets-le2)
		ucidef_add_switch "switch0" \
			"2:lan:1" "3:lan:2" "4:wan" "6@eth0"
		;;
	cs-qr10|\
	d105|\
	dch-m225|\
	hpm|\
	mzk-ex300np|\
	mzk-ex750np|\
	na930|\
	pbr-d1|\
	wli-tx4-ag300n|\
	wmr-300|\
	wn3000rpv3|\
	wrh-300cr)
		ucidef_set_interface_lan "eth0"
		;;
	c50)
		ucidef_add_switch "switch0" \
			"1:lan:3" "2:lan:4" "3:lan:1" "4:lan:2" "0:wan" "6@eth0"
		;;
	dir-860l-b1)
		ucidef_add_switch "switch0" \
			"1:lan:4" "2:lan:3" "3:lan:2" "4:lan:1" "0:wan" "6@eth0"
		;;
	duzun-dm06)
		ucidef_add_switch "switch0" \
			"1:lan" "0:wan" "6@eth0"
		;;
	e1700|\
	mt7620a_mt7530)
		ucidef_add_switch "switch1" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "6@eth0"
		;;
	hc5*61|\
	y1s)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "5:lan" "0:wan" "6@eth0"
		;;
	kn_rc|\
	kn_rf)
		ucidef_add_switch "switch0" \
			"0:wan" "1:lan" "2:lan" "3:lan" "4:lan" "6@eth0"
		;;
	kng_rc)
		ucidef_add_switch "switch1" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "7t@eth0"
		;;
	mlwg2|\
	wizard8800|\
	wl-330n)
		ucidef_set_interface_lan "eth0.1"
		;;
	mr200)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "6t@eth0"
		ucidef_set_interface_wan "usb0"
		;;
	mzk-dp150n|\
	vocore)
		ucidef_add_switch "switch0" \
			"0:lan" "4:lan" "6t@eth0"
		;;
	newifi-d1)
		ucidef_add_switch "switch0" \
		"1:lan:2" "2:lan:1" "4:wan" "6@eth0"
		;;
	re6500)
		ucidef_add_switch "switch0" \
			"0:lan:1" "1:lan:2" "2:lan:3" "3:lan:4" "6@eth0"
		;;
	rt-n56u)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "4:wan" "8@eth0"
		;;
	tew-691gr|\
	tew-692gr|\
	wlr-6000)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "5:wan" "0@eth0"
		;;
	vocore2)
		ucidef_add_switch "switch0" \
			"0:lan" "2:lan" "6t@eth0"
		;;
	f5d8235-v1|\
	tew-714tru|\
	v11st-fe|\
	wzr-agl300nh)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "3:lan" "4:lan" "0:wan" "5@eth0"
		;;
	wcr-150gn)
		ucidef_add_switch "switch0" \
			"0:lan" "6t@eth0"
		;;
	whr-1166d)
		ucidef_add_switch "switch0" \
			"0:lan" "1:lan" "2:lan" "3:lan" "5:wan" "6@eth0"
		;;
	wizfi630a)
		ucidef_add_switch "switch0" \
			"1:lan" "2:lan" "0:wan" "6@eth0"
		;;
	y1|\
	treebear-x1|\
	miwifi-mini)
		ucidef_add_switch "switch0" \
			"0:lan:2" "1:lan:1" "4:wan" "6@eth0"
		;;
	*)
		RT3X5X=`cat /proc/cpuinfo | egrep "(RT3.5|RT5350)"`
		if [ -n "${RT3X5X}" ]; then
			ramips_setup_rt3x5x_vlans
		else
			ucidef_set_interfaces_lan_wan "eth0.1" "eth0.2"
		fi
		;;
	esac
}

ramips_setup_macs()
{
	local board="$1"
	local lan_mac=""
	local wan_mac=""

	case $board in
	a5-v11|\
	ht-tm02)
		lan_mac=$(cat /sys/class/net/eth0/address)
		;;
	all0239-3g|\
	carambola|\
	freestation5|\
	w502u|\
	wnce2001|\
	dw22d)
		wan_mac=$(mtd_get_mac_binary factory 46)
		;;
	bc2|\
	broadway|\
	d105|\
	dir-300-b7|\
	dir-320-b1|\
	dir-620-a1|\
	esr-9753|\
	freestation5|\
	hlk-rm04|\
	mpr-a1|\
	psr-680w|\
	sl-r7205|\
	y1|\
	y1s)
		lan_mac=$(cat /sys/class/net/eth0/address)
		lan_mac=$(macaddr_setbit_la "$lan_mac")
		wan_mac=$(macaddr_add "$lan_mac" 1)
		;;
	br-6475nd)
		lan_mac=$(cat /sys/class/net/eth0/address)
		wan_mac=$(mtd_get_mac_binary devdata 7)
		;;
	cy-swr1100|\
	dch-m225)
		lan_mac=$(mtd_get_mac_ascii factory lanmac)
		;;
	dir-645)
		lan_mac=$(mtd_get_mac_ascii nvram lanmac)
		wan_mac=$(mtd_get_mac_ascii nvram wanmac)
		;;
	dir-860l-b1)
		lan_mac=$(mtd_get_mac_ascii factory lanmac)
		wan_mac=$(mtd_get_mac_ascii factory wanmac)
		;;
	e1700)
		wan_mac=$(mtd_get_mac_ascii config WAN_MAC_ADDR)
		;;
	hc5*61)
		lan_mac=`mtd_get_mac_ascii bdinfo "Vfac_mac "`
		[ -n "$lan_mac" ] || lan_mac=$(cat /sys/class/net/eth0/address)
		wan_mac=$(macaddr_add "$lan_mac" 1)
		;;
	kn_rc|\
	kn_rf|\
	kng_rc)
		wan_mac=$(mtd_get_mac_binary factory 40)
		;;
	linkits7688 | \
	linkits7688d)
		wan_mac=$(mtd_get_mac_binary factory 4)
		lan_mac=$(mtd_get_mac_binary factory 46)
		;;
	mac1200rv2)
		lan_mac=$(mtd_get_mac_binary factory_info 13)
		wan_mac=$(macaddr_add "$lan_mac" 1)
		;;
	miwifi-mini)
		wan_mac=$(cat /sys/class/net/eth0/address)
		lan_mac=$(macaddr_setbit_la "$wan_mac")
		;;
	m3|\
	m4|\
	x5|\
	x8)
		lan_mac=$(cat /sys/class/net/eth0/address)
		lan_mac=$(macaddr_add "$lan_mac" -2)
		;;
	newifi-d1)
		lan_mac=$(cat /sys/class/net/eth0/address)
		lan_mac=$(macaddr_add "$lan_mac" 2)
		;;
	omega2|\
	omega2p)
		wan_mac=$(mtd_get_mac_binary factory 4)
		lan_mac=$(mtd_get_mac_binary factory 46)
		;;
	oy-0001)
		lan_mac=$(mtd_get_mac_binary factory 40)
		wan_mac=$(mtd_get_mac_binary factory 46)
		;;
	youku-yk1)
		wan_mac=$(mtd_get_mac_binary factory 46)
		;;
	rt-n56u)
		lan_mac=$(cat /sys/class/net/eth0/address)
		lan_mac=$(macaddr_setbit_la "$lan_mac")
		wan_mac=$(mtd_get_mac_binary factory 32772)
		;;
	sk-wb8)
		wan_mac=$(mtd_get_mac_binary factory 57350)
		;;
	tew-691gr)
		wan_mac=$(macaddr_add "$(mtd_get_mac_binary factory 4)" 3)
		;;
	tew-692gr)
		wan_mac=$(macaddr_add "$(mtd_get_mac_binary factory 4)" 1)
		;;
	tiny-ac)
		lan_mac=$(mtd_get_mac_ascii u-boot-env LAN_MAC_ADDR)
		wan_mac=$(mtd_get_mac_ascii u-boot-env WAN_MAC_ADDR)
		;;
	vr500)
		lan_mac=$(mtd_get_mac_binary factory 57344)
		wan_mac=$(mtd_get_mac_binary factory 57350)
		;;
	w306r-v20)
		lan_mac=$(cat /sys/class/net/eth0/address)
		wan_mac=$(macaddr_add "$lan_mac" 5)
		;;
	wcr-150gn)
		wan_mac=$(mtd_get_mac_binary factory 40)
		;;
	whr-1166d|\
	whr-300hp2|\
	whr-600d|\
	wsr-600)
		wan_mac=$(mtd_get_mac_binary factory 4)
		lan_mac=$wan_mac
		;;
	wizfi630a)
		lan_mac=$(mtd_get_mac_binary factory 4)
		wan_mac=$(mtd_get_mac_binary factory 40)
		;;
	wlr-6000)
		wan_mac=$(macaddr_add "$(mtd_get_mac_binary factory 32772)" 2)
		;;
	wsr-1166)
		local index="$(find_mtd_index "board_data")"
		wan_mac="$(grep -m1 mac= "/dev/mtd${index}" | cut -d= -f2)"
		lan_mac=$wan_mac
		;;
	a3004ns)
		# Read from U-Boot first (same as stock firmware).
		lan_mac=$(mtd_get_mac_binary u-boot 0x1fc20)
		wan_mac=$(mtd_get_mac_binary u-boot 0x1fc40)
		# Fallback to EEPROM if reading from U-Boot fails.
		if ! validate_mac_addresses "$lan_mac" "$wan_mac"; then
			lan_mac=$(mtd_get_mac_binary factory 0xe000)
			wan_mac=$(mtd_get_mac_binary factory 0xe006)
		fi
		# Randomize MAC addresses if both previous methods fail.
		if ! validate_mac_addresses "$lan_mac" "$wan_mac"; then
			lan_mac=$(generate_rand_mac)
			wan_mac=$(macaddr_add "$lan_mac" 1)
		fi
		;;
	*)
		lan_mac=$(cat /sys/class/net/eth0/address)
		wan_mac=$(macaddr_add "$lan_mac" 1)
		;;
	esac

	[ -n "$lan_mac" ] && ucidef_set_interface_macaddr "lan" $lan_mac
	[ -n "$wan_mac" ] && ucidef_set_interface_macaddr "wan" $wan_mac
}

board_config_update
board=$(ramips_board_name)
ramips_setup_interfaces $board
ramips_setup_macs $board
board_config_flush

exit 0
