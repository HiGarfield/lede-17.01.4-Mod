#!/bin/sh /etc/rc.common

START=99
STOP=10
USE_PROCD=1
NAME=aria2
PROG=/usr/bin/aria2c

append_params() {
	local p
	local v
	local s="$1"
	shift
	for p in $*; do
		config_get v "$s" "$p"
		[ -n "$v" ] && (
			p=$(echo "$p" | sed -e 's|_|-|g')
			echo "$p=$v" >>"$config_file"
		)
	done
}

section_enabled() {
	local result
	config_get_bool result "$1" 'enabled' 0
	[ "$result" -eq 1 ]
}

option_disabled() {
	local result
	config_get_bool result "$1" "$2" 1
	[ "$result" -eq 0 ]
}

is_in_mounted_dir() {
	local my_dir="$(echo "$1" | sed -e 's#/\+#/#g' -e 's#/*[[:space:]]*$##g')"
	echo "$my_dir" | grep -q '^/' || return 1
	local mounted_dirs="$(
		{
			block info |
				grep "[[:space:]]TYPE=\"\(exfat\|ntfs\|vfat\|ext[2-4]\)\"" |
				awk -F "[[:space:]]MOUNT=\"" '{print $2}' |
				awk -F "\"" '{print $1}'

			grep "^/dev/" /proc/mounts |
				grep -w "rw" |
				awk '{print $2}'

		} | sort | uniq -d
	)"
	while [ "$my_dir" != "/" ]; do
		echo "$mounted_dirs" | grep -q "^$my_dir$" &&
			return 0
		my_dir="$(dirname "$my_dir")"
	done
	return 1
}

aria2_start() {
	local s="$1"
	local user
	local nice

	section_enabled "$s" || return 1
	config_get dir "$s" 'dir'

	[ -n "$dir" ] || {
		logger -t ARIA2C "Please set downlod dir"
		return 1
	}

	[ -d "$dir" ] || {
		if is_in_mounted_dir "$dir"; then
			mkdir -p "$dir"
		else
			logger -t ARIA2C "Please create download dir: $dir"
			return 1
		fi
	}

	config_get config_dir "$s" 'config_dir' '/var/etc/aria2'
	config_get user "$s" 'user' 'root'
	config_get nice "$s" 'nice' 0

	config_file="$config_dir/aria2.conf"
	session_file="$config_dir/aria2.session"
	dht_file="$config_dir/dht.dat"
	log_file="$config_dir/aria2.log"

	[ -d "$config_dir" ] || is_in_mounted_dir "$config_dir" ||
		config_dir='/var/etc/aria2'

	[ -d "$config_dir" ] || {
		mkdir -p "$config_dir"
		chmod 0755 "$config_dir"
		touch "$config_file"
	}

	touch "$session_file" # create session file

	{
		echo "enable-rpc=true"
		echo "rpc-allow-origin-all=true"
		echo "rpc-listen-all=true"
		echo "quiet=true"
		echo "continue=true"
		echo "input-file=$session_file"
		echo "save-session=$session_file"
	} >"$config_file"

	option_disabled "$s" 'enable_dht' || echo "dht-file-path=$dht_file" >>"$config_file"
	option_disabled "$s" 'enable_log' || {
		[ -f "$log_file" ] && echo >"$log_file" # if log file exist, clear it
		echo "log=$log_file" >>"$config_file"
	}

	# if user is set, change dir owner
	[ -z "$user" ] || {
		chown -R "$user:$user" "$config_dir"
		chown -R "$user:$user" "$dir"
	}

	append_params "$s" \
		file_allocation bt_enable_lpd enable_dht rpc_user rpc_passwd rpc_listen_port dir bt_tracker disk_cache \
		max_overall_download_limit max_overall_upload_limit max_download_limit max_upload_limit max_concurrent_downloads \
		max_connection_per_server min_split_size split save_session_interval follow_torrent listen_port bt_max_peers \
		peer_id_prefix user_agent rpc_secret log_level

	config_list_foreach "$s" extra_settings append_extrasettings

	procd_open_instance "${NAME}.${s}"
	procd_set_param command "$PROG"
	procd_append_param command --conf-path="${config_file}"

	procd_set_param stderr 1
	procd_set_param user "$user"
	procd_set_param group "$user"
	procd_set_param nice "$nice"
	procd_set_param respawn
	procd_set_param limits core="0 0"

	procd_set_param file "$config_file"
	[ -n "$user" ] &&
		procd_set_param user "$user"

	procd_add_jail "${NAME}.${s}" log
	procd_add_jail_mount "$config_file"
	procd_add_jail_mount_rw "$dir" "$config_dir" "$log_file"
	procd_close_instance
}

append_extrasettings() {
	echo "$1" >>"$config_file"
}

start_service() {
	config_load "$NAME"
	config_foreach aria2_start "aria2"
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}
