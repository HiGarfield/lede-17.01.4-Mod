#!/bin/sh /etc/rc.common

START=99
STOP=10
USE_PROCD=1
PROG="/usr/bin/transmission-daemon"

LIST_SEP="
"

append_params() {
	local p
	local v
	local s="$1"
	shift
	IFS="$LIST_SEP"
	for p in "$@"; do
		config_get v "$s" "$p"
		for v in $v; do
			[ -n "$v" ] && echo "\"$p\": $v," | sed -e 's|_|-|g'
		done
	done
	unset IFS
}

append_params_quotes() {
	local p
	local v
	local s="$1"
	shift
	IFS="$LIST_SEP"
	for p in "$@"; do
		config_get v "$s" "$p"
		for v in $v; do
			[ -n "$v" ] && {
				printf "\"%s" "$p" | sed -e 's|/|\\/|g;s|_|-|g'
				echo "\": \"$v\","
			}
		done
	done
	unset IFS
}

section_enabled() {
	config_get_bool enabled "$1" enabled 0
	[ $enabled -gt 0 ]
}

opt_incomplete_dir_enabled() {
	local opt_incomplete_dir_enabled
	config_get_bool opt_incomplete_dir_enabled "$1" incomplete_dir_enabled 0
	[ $opt_incomplete_dir_enabled -gt 0 ]
}

is_in_mounted_dir() {
	local my_dir="$(echo "$1" | sed -e 's#/\+#/#g' -e 's#/*[[:space:]]*$##g')"
	echo "$my_dir" | grep -q '^/' || return 1
	local mounted_dirs="$(
		{
			block info |
				grep "[[:space:]]TYPE=\"\(exfat\|ntfs\|vfat\|ext[2-4]\)\"" |
				awk -F "[[:space:]]MOUNT=\"" '{print $2}' |
				awk -F "\"" '{print $1}'

			grep "^/dev/" /proc/mounts |
				grep -w "rw" |
				awk '{print $2}'

		} | sort | uniq -d
	)"
	while [ "$my_dir" != "/" ]; do
		echo "$mounted_dirs" | grep -q "^$my_dir$" &&
			return 0
		my_dir="$(dirname "$my_dir")"
	done
	return 1
}

transmission() {
	local cfg="$1"
	local USE

	local user
	local config_overwrite
	local download_dir config_dir
	local mem_percentage
	local nice

	section_enabled "$section" || return 1

	config_get download_dir "$cfg" 'download_dir'

	[ -n "$download_dir" ] || {
		logger -t transmission "Please set downlod dir"
		return 1
	}

	[ -d "$download_dir" ] || {
		if is_in_mounted_dir "$download_dir"; then
			mkdir -p "$download_dir"
		else
			logger -t transmission "Please create download dir: $download_dir"
			return 1
		fi
	}

	opt_incomplete_dir_enabled "$section" && {
		local incomplete_dir
		config_get incomplete_dir "$cfg" 'incomplete_dir'

		[ -n "$incomplete_dir" ] || {
			logger -t transmission "Please set incomplete dir"
			return 1
		}

		[ -d "$incomplete_dir" ] || {
			if is_in_mounted_dir "$incomplete_dir"; then
				mkdir -p "$incomplete_dir"
			else
				logger -t transmission "Please create incomplete dir: $incomplete_dir"
				return 1
			fi
		}
	}

	config_get config_dir "$cfg" 'config_dir' '/var/etc/transmission'
	config_get user "$cfg" 'user' 'root'
	config_get mem_percentage "$cfg" 'mem_percentage' '50'
	config_get config_overwrite "$cfg" config_overwrite 1
	config_get nice "$cfg" nice 0

	local MEM=$(sed -ne 's!^MemTotal:[[:space:]]*\([0-9]*\) kB$!\1!p' /proc/meminfo)
	if [ "$MEM" -gt 0 ] 2>/dev/null; then
		USE=$(expr $MEM \* $mem_percentage \* 10)
	fi

	[ -d "$config_dir" ] || is_in_mounted_dir "$config_dir" ||
		config_dir='/var/etc/transmission'

	config_file="$config_dir/settings.json"
	[ -d $config_dir ] || {
		mkdir -p "$config_dir"
		chmod 0755 "$config_dir"
		touch "$config_file"
		mkdir -p "$config_dir/resume"
		mkdir -p "$config_dir/torrents"
		mkdir -p "$config_dir/blocklists"
		[ -e "$config_dir/stats.json" ] || touch "$config_dir/stats.json"
		[ -z "$user" ] || chown -R "$user:$user" "$config_dir"
	}

	[ "$config_overwrite" = 0 ] || {

		echo "{"

		append_params "$cfg" \
			alt_speed_down alt_speed_enabled alt_speed_time_begin alt_speed_time_day \
			alt_speed_time_enabled alt_speed_time_end alt_speed_up blocklist_enabled \
			cache_size_mb download_queue_enabled download_queue_size \
			dht_enabled encryption idle_seeding_limit idle_seeding_limit_enabled \
			incomplete_dir_enabled lazy_bitfield_enabled lpd_enabled message_level \
			peer_id_ttl_hours peer_limit_global peer_limit_per_torrent peer_port \
			peer_port_random_high peer_port_random_low peer_port_random_on_start \
			pex_enabled port_forwarding_enabled preallocation prefetch_enabled \
			ratio_limit ratio_limit_enabled rename_partial_files rpc_authentication_required \
			rpc_enabled rpc_port rpc_whitelist_enabled queue_stalled_enabled \
			queue_stalled_minutes scrape_paused_torrents_enabled script_torrent_done_enabled \
			seed_queue_enabled seed_queue_size \
			speed_limit_down speed_limit_down_enabled speed_limit_up \
			speed_limit_up_enabled start_added_torrents trash_original_torrent_files \
			umask upload_slots_per_torrent utp_enabled \
			watch_dir_enabled rpc_host_whitelist_enabled

		append_params_quotes "$cfg" \
			blocklist_url bind_address_ipv4 bind_address_ipv6 download_dir incomplete_dir \
			peer_congestion_algorithm peer_socket_tos rpc_bind_address rpc_password rpc_url \
			rpc_username rpc_whitelist script_torrent_done_filename watch_dir

		echo "\"invalid-key\": false"
		echo "}"

	} >"$config_file"

	procd_open_instance
	procd_set_param command "$PROG"
	procd_append_param command -f -g "$config_dir"
	procd_set_param user "$user"
	procd_set_param group "$user"
	procd_set_param nice "$nice"
	procd_set_param stderr 1
	procd_set_param respawn

	if [ $USE -gt 0 ] 2>/dev/null; then
		procd_set_param limits core="0 0" as="$USE $USE"
		logger -t transmission "Starting with $USE virt mem"
	else
		procd_set_param limits core="0 0"
	fi

	procd_add_jail transmission log
	procd_add_jail_mount "$config_file"
	procd_add_jail_mount_rw "$config_dir/resume"
	procd_add_jail_mount_rw "$config_dir/torrents"
	procd_add_jail_mount_rw "$config_dir/blocklists"
	procd_add_jail_mount_rw "$config_dir/stats.json"
	procd_add_jail_mount_rw "$download_dir"
	procd_close_instance
}

start_service() {
	config_load 'transmission'
	config_foreach transmission 'transmission'
}

service_triggers() {
	procd_add_reload_trigger 'transmission'
}
